{"version":3,"sources":["Soda.png","Chips.png","VendingMachine.png","Message.js","Chips.js","Sardines.js","Soda.js","Navbar.js","VendingMachine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Message","_ref","children","react_default","a","createElement","className","Chips","_useState","useState","_useState2","Object","slicedToArray","bags","setBags","bagsComponent","map","bag","i","key","src","chipsImg","style","top","concat","y","left","x","alt","src_Message_0","length","onClick","window","innerWidth","Math","random","innerHeight","toConsumableArray","Link","to","Sardines","backgroundImage","Soda","sodaImg","Navbar","NavLink","exact","activeClassName","VendingMachine","vendingMachineImg","App","src_Navbar_0","Switch","Route","path","render","src_VendingMachine_1","src_Soda_1","src_Sardines_0","src_Chips_1","Boolean","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3597729b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Soda.7746d7d5.png\";","module.exports = __webpack_public_path__ + \"static/media/Chips.0e21446e.png\";","module.exports = __webpack_public_path__ + \"static/media/VendingMachine.369bea35.png\";","import React from 'react';\nimport './Message.css';\n\nconst Message = ({ children }) => <div className='Message'>{children}</div>;\n\nexport default Message;\n","import React, { useState } from 'react';\nimport Message from './Message';\n\nimport { Link } from 'react-router-dom';\nimport chipsImg from './Chips.png';\n\nimport './Chips.css';\n\nconst Chips = () => {\n  const [bags, setBags] = useState([]);\n\n  const handleClick = () => {\n    const x = window.innerWidth * Math.random();\n    const y = window.innerHeight * Math.random();\n    setBags([...bags, { x, y }]);\n  };\n\n  const bagsComponent = bags.map((bag, i) => (\n    <img\n      key={i}\n      src={chipsImg}\n      className='bag'\n      style={{ top: `${bag.y}px`, left: `${bag.x}px` }}\n      alt=\"bag of lay's chips\"\n    />\n  ));\n\n  return (\n    <div className='Chips'>\n      <Message>\n        <h1>bags eaten: {bags.length}</h1>\n        <button onClick={handleClick}>nom nom nom</button>\n        <h1>\n          <Link to='/'>Go Back</Link>\n        </h1>\n      </Message>\n      {bagsComponent}\n    </div>\n  );\n};\n\nexport default Chips;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Message from './Message';\nimport './Sardines.css';\n\nconst Sardines = () => {\n  return (\n    <div\n      className='Sardines'\n      style={{\n        backgroundImage:\n          'url(https://media.giphy.com/media/tVk4w6EZ7eGNq/giphy.gif)'\n      }}\n    >\n      <Message>\n        <h1>you don't eat the sardines. the sardines, they eat you!</h1>\n        <Link to='/'>Go Back</Link>\n      </Message>\n    </div>\n  );\n};\n\nexport default Sardines;\n","import React from 'react';\nimport Message from './Message';\nimport { Link } from 'react-router-dom';\nimport sodaImg from './Soda.png';\nimport './Soda.css';\n\nconst Soda = () => {\n  return (\n    <div className='Soda'>\n      <img src={sodaImg} alt='coca cola can' />\n      <Message>\n        <h1>SODAAAAA IS MY FAVORITE</h1>\n        <h3>But now I drink sparkling water instead</h3>\n        <p>(I still miss Soda)</p>\n        <Link to='/'>Go Back</Link>\n      </Message>\n\n      <img src={sodaImg} alt='coca cola can' />\n    </div>\n  );\n};\n\nexport default Soda;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  return (\n    <div className='Navbar'>\n      <NavLink exact activeClassName='Navbar-active' to='/'>\n        Home\n      </NavLink>\n      <NavLink exact activeClassName='Navbar-active' to='/chips'>\n        Chips\n      </NavLink>\n      <NavLink exact activeClassName='Navbar-active' to='/soda'>\n        Soda\n      </NavLink>\n      <NavLink exact activeClassName='Navbar-active' to='/sardines'>\n        Sardines\n      </NavLink>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Message from './Message';\nimport './VendingMachine.css';\nimport vendingMachineImg from './VendingMachine.png';\n\nconst VendingMachine = () => {\n  return (\n    <div\n      className='VendingMachine'\n      style={{ backgroundImage: `url(${vendingMachineImg})` }}\n    >\n      <Message>\n        <h1>hello i am a vending machine. what would you like to eat?</h1>\n      </Message>\n      <Message>\n        <h1>\n          <Link to='/soda'>Soda</Link>\n        </h1>\n        <h1>\n          <Link to='/chips'>Chips</Link>\n        </h1>\n        <h1>\n          <Link to='/sardines'>Sardines</Link>\n        </h1>\n      </Message>\n    </div>\n  );\n};\n\nexport default VendingMachine;\n","import React from 'react';\nimport Chips from './Chips';\nimport Sardines from './Sardines';\nimport Soda from './Soda';\nimport Navbar from './Navbar';\nimport VendingMachine from './VendingMachine';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Navbar />\n      <Switch>\n        <Route exact path='/' render={() => <VendingMachine />} />\n        <Route exact path='/soda' render={() => <Soda />} />\n        <Route exact path='/sardines' render={() => <Sardines />} />\n        <Route exact path='/chips' render={() => <Chips />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}